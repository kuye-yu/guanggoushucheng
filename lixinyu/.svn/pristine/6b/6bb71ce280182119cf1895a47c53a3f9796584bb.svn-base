class Car{
    constructor(options){
        // 数据地址
        this.url = options.url;
        this.tbody = options.tbody;
        this.totalPrice1 = options.totalPrice1;
        this.totalPrice2 = options.totalPrice2;
        this.totalSum = options.totalSum;
        this.allDelete = options.allDelete;
        this.money = 0;
        this.sum = 0;
        // 读取到所有商品数据
        this.load();
         // 事件委托绑定事件
        this.addEvent();
        this.Delete();
    }
    // 读取所有数据方法
    load(){
        var that = this;
        // 执行ajax
        ajaxGet(this.url,function(res){
            that.res = JSON.parse(res);
            that.getLocalStorage();
        })
    }
    // 查localstorage数据方法
    getLocalStorage(){
        this.goods = JSON.parse(localStorage.getItem("goods")) ? JSON.parse(localStorage.getItem("goods")) : [];
        this.display();
    }
    // 渲染页面方法 
    display(){
        var str = "";
        // 遍历数据
        for(var i = 0;i < this.goods.length;i++){
            // 遍历商品
            for(var j = 0;j< this.res.length;j++){
                // 判断二者id是否相同
                if(this.res[j].id == this.goods[i].id){
                   // 渲染页面
                    str += `<tr index="${this.res[j].id}">
                                <td class="t1">
                                    <label><img src="${this.res[j].img}"></label>
                                </td>
                                <td class="td2">
                                    <p>
                                        <a href="#" target="_blank" title="${this.res[j].name}</a>
                                    </p>
                                    <div class="selectPresent"></div>
                                    <p></p>
                                </td>
                                <td class="td3">￥${this.res[j].price}(74折)</td>
                                <td class="td5">￥${this.res[j].present}</td>
                                <td class="td6">
                                            <input type="number" min="1" min="20" class="number" value="${this.goods[i].num}">

                                </td>
                                <td class="td7">
                                    <a href="#">删除</a>
                                </td>
                            </tr>`;
                    this.money += this.goods[i].num * this.res[j].present;
                    this.sum += (this.goods[i].num - 0);
                }
            }
        }
        this.money = parseInt(this.money) + ":00";
        // 上树
        this.totalPrice1.innerHTML = `￥${this.money}`;
        this.totalPrice2.innerHTML = `${this.money}`;
        this.totalSum.innerHTML = `${this.sum}`;
        this.tbody.innerHTML = str;
    }
    // 绑定事件方法
    addEvent(){
        var that = this;
        // 绑定删除 和加减
        this.tbody.addEventListener("click",function(eve){
            if(eve.target.parentNode.className == "td7"){
                console.log(1)
                that.strikeOut(eve);
            }
        })
        // 点击改变商品数量
        this.tbody.addEventListener("input",function(eve){
            that.changeSum(eve);
        })
    }
    updateLocalStorage(cb){
       for(var i = 0;i<this.goods.length;i++){
            if(this.goods[i].id === this.id){
               cb(i);
            }
        }
        localStorage.setItem("goods",JSON.stringify(this.goods))
    }
    // 清除所有数据方法
    Delete(){
        var that = this;
        this.allDelete.onclick = function(){
            that.tbody.innerHTML = "";
            localStorage.removeItem("goods")
            that.totalPrice.innerHTML = `0`;
            that.totalSum.innerHTML = `总数量：0`;
        }
    }
    // 删除方法
    strikeOut(eve){
            this.id = eve.target.parentNode.parentNode.getAttribute("index");
            eve.target.parentNode.parentNode.remove();
            var that = this;
            this.updateLocalStorage(function(i){
                that.goods.splice(i,1);
                // 将总价和总数量清空重新渲染
                that.sum = 0;
                that.money = 0;
                that.display();
            });
        
    }
    // 改变商品数量方法
    changeSum(eve){
        if(eve.target.className == "number"){
                this.id = eve.target.parentNode.parentNode.getAttribute("index");
                var that = this;
                this.updateLocalStorage(function(i){
                    that.goods[i].num = eve.target.value;
                    that.sum = 0;
                    that.money = 0;
                    that.display();
                });
            }
    }  
}
new Car({
    url:"http://localhost/lixinyu/json/shopping.json",
    tbody:document.querySelector(".buyCar .table-car .list tbody"),
    totalPrice1:document.querySelector(".buyCar .table-car .conclusion em"),
    totalPrice2:document.querySelector(".buyCar .table-car .all span"),
    totalSum:document.querySelector(".buyCar .table-car .conclusion .sum"),
    allDelete:document.querySelector(".buyCar .table-car .conclusion .fl a"),
})
